{"ast":null,"code":"import axios from 'axios';\nconst API_URL = \"http://127.0.0.1:5000\"; // Replace with your actual backend API URL\n\n// Function to scan for vulnerabilities\nexport const scanForVulnerabilities = async (url, scanType, email) => {\n  try {\n    const response = await axios.post(`${API_URL}/scan`, {\n      url,\n      scan_type: scanType,\n      email\n    });\n    return response.data; // Assuming the response contains scan results\n  } catch (error) {\n    console.error(\"Error during scan:\", error);\n    return {\n      error: \"Failed to perform scan\"\n    };\n  }\n};\n\n// Function to download the report\nexport const downloadReport = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/download_report`, {\n      responseType: 'blob'\n    });\n\n    // Create a Blob URL for the file to download\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'scan_report.txt'); // The report will be downloaded with this filename\n    document.body.appendChild(link);\n    link.click();\n  } catch (error) {\n    console.error(\"Error during report download:\", error);\n  }\n};","map":{"version":3,"names":["axios","API_URL","scanForVulnerabilities","url","scanType","email","response","post","scan_type","data","error","console","downloadReport","get","responseType","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click"],"sources":["S:/A-1/web-vul/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = \"http://127.0.0.1:5000\"; // Replace with your actual backend API URL\r\n\r\n// Function to scan for vulnerabilities\r\nexport const scanForVulnerabilities = async (url, scanType, email) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/scan`, { \r\n            url, \r\n            scan_type: scanType, \r\n            email \r\n        });\r\n        return response.data; // Assuming the response contains scan results\r\n    } catch (error) {\r\n        console.error(\"Error during scan:\", error);\r\n        return { error: \"Failed to perform scan\" };\r\n    }\r\n};\r\n\r\n// Function to download the report\r\nexport const downloadReport = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/download_report`, {\r\n            responseType: 'blob',\r\n        });\r\n        \r\n        // Create a Blob URL for the file to download\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', 'scan_report.txt'); // The report will be downloaded with this filename\r\n        document.body.appendChild(link);\r\n        link.click();\r\n    } catch (error) {\r\n        console.error(\"Error during report download:\", error);\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,QAAQ,EAAEC,KAAK,KAAK;EAClE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,OAAO,EAAE;MACjDE,GAAG;MACHK,SAAS,EAAEJ,QAAQ;MACnBC;IACJ,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO;MAAEA,KAAK,EAAE;IAAyB,CAAC;EAC9C;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMN,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,kBAAkB,EAAE;MAC3Da,YAAY,EAAE;IAClB,CAAC,CAAC;;IAEF;IACA,MAAMX,GAAG,GAAGY,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACZ,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;IACjE,MAAMU,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGnB,GAAG;IACfgB,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAClDH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACzD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}